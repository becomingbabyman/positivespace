psDirectives = angular.module 'psDirectives', []


##########################
# Form Directives
# Notes:
# - All inputs should be within a form element
# - Form elements should have a unique name attribute
# - This may become an alternative - https://github.com/angular-ui/angular-ui/pull/191


####
# <input>
# Pure HTML manipulation directive to autofill input attributes with logical defaults
# name:         String - REQUIRED      #TODO: see if you can programatically find it by searching up the dom tree for the 'form' elm
# type:         String - default 'text'
# placeholder:  String - default name
# title:        String - default name
# id:           String - default name + random number
psDirectives.directive 'input', () ->
    # TODO: get a placeholder plugin to patch old browsers and behave like https://github.com/wduffy/jLabel -- probably just write a directive for the 'placeholder' attribute
    # TODO: handle non text inputs gracefully

    directiveDefinitionObject =
        restrict: 'E'

        link: (scope, element, attrs) ->
            attrs.$set 'type', (attrs.type or 'text')
            attrs.$set 'placeholder', (attrs.placeholder or attrs.name)
            attrs.$set 'title', (attrs.title or attrs.placeholder)
            attrs.$set 'id', (attrs.id or "#{attrs.name}#{Math.floor(Math.random()*999999)}")
            # attrs.$set 'name', (attrs.name or attrs.placeholder.replace(///^\s+|\s+$///g, '').split(' ').join('-'))
            # attrs.classes or= attrs.class or= ''

    return directiveDefinitionObject


####
# <control-group>
# label:        String - default null
# helpInline:   String - default null
# helpBlock:    String - default null
psDirectives.directive 'controlGroup', () ->

    findInputEl = (element) ->
        e = element.find('input')
        if e.length < 1 then e = element.find('select')
        if e.length < 1 then e = element.find('textarea')
        e

    directiveDefinitionObject =
        restrict: 'E'
        scope:
            label: '@'
            helpInline: '@'
            helpBlock: '@'
        templateUrl: "<%= asset_path('directives/control_group.html') %>"
        transclude: true
        require: '?^form'

        compile: (element, attrs) ->
            inputEl = findInputEl(element)
            type = inputEl.attr('type')
            element.find('.control-group').addClass(type)

            return {
                pre: (scope, element, attrs, formController) ->
                    # Don't need this yet
                post: (scope, element, attrs, formController) ->
                    inputEl = findInputEl(element)

                    scope.input or= {}
                    scope.input.id = inputEl.attr('id')
                    scope.input.name = inputEl.attr('name')

                    scope.field = formController[scope.input.name]
                    
                    buildErrorMsg = ->
                        errors = []
                        if scope.field.$error.required  then errors.push "can't be blank"
                        if scope.field.$error.email     then errors.push "must be an email"
                        if scope.field.$error.url       then errors.push "must be a url"
                        if scope.field.$error.minlength then errors.push "too short"
                        if scope.field.$error.maxlength then errors.push "too long"
                        if scope.field.$error.pattern   then errors.push "wrong format"
                        scope.field.errorMessage = errors.join(', ')
                    buildErrorMsg() 
                    scope.$watch 'field.$error', (() -> buildErrorMsg()), true

                    # set hasFocus class on control-group
                    scope.hasFocus = false
                    inputEl.bind 'focusin', ->
                        scope.hasFocus = true
                        scope.$apply()
                    inputEl.bind 'focusout', ->
                        scope.hasFocus = false
                        scope.$apply()
            }

    return directiveDefinitionObject

