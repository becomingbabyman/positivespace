psDirectives = angular.module 'psDirectives', []


####################################################
####################################################
# Form Directives
# Notes:
# - All inputs should be within a form element
# - Form elements should have a unique name attribute
# - This may become an alternative - https://github.com/angular-ui/angular-ui/pull/191


##########################
# <input> or <select> or <textarea>
# Pure HTML manipulation directive to autofill input attributes with logical defaults
# name:         String - REQUIRED      #TODO: see if you can programatically find it by searching up the dom tree for the 'form' elm
# type:         String - default 'text' - only on <input>
# placeholder:  String - default name
# title:        String - default name
# id:           String - default name + random number
fieldDirectiveDefinitionObject =
	restrict: 'E'
	link: (scope, element, attrs) ->
		if element.prop("tagName") == 'INPUT' and !attrs.type?
			attrs.$set 'type', (attrs.type or 'text')
		unless attrs.placeholder? then attrs.$set 'placeholder', attrs.name
		unless attrs.title? then attrs.$set 'title', (attrs.placeholder or attrs.name)
		unless attrs.id? then attrs.$set 'id', _.uniqueId("#{attrs.name}_")
		# attrs.$set 'name', (attrs.name or attrs.placeholder.replace(///^\s+|\s+$///g, '').split(' ').join('-'))
		# Placeholder pollyfill
		if element.prop("tagName") == 'INPUT' or element.prop("tagName") == 'TEXTAREA' then element.placeholder()

psDirectives.directive 'input', () ->
	return fieldDirectiveDefinitionObject

psDirectives.directive 'select', () ->
	return fieldDirectiveDefinitionObject

psDirectives.directive 'textarea', () ->
	return fieldDirectiveDefinitionObject


##########################
# <control-group>
# label:        String - default null
# helpInline:   String - default null
# helpBlock:    String - default null
psDirectives.directive 'controlGroup', () ->

	findInputEl = (element) ->
		e = element.find('input')
		if e.length < 1 then e = element.find('select')
		if e.length < 1 then e = element.find('textarea')
		e

	directiveDefinitionObject =
		restrict: 'E'
		scope:
			label: '@'
			helpInline: '@'
			helpBlock: '@'
		templateUrl: "<%= asset_path('directives/control_group.html') %>"
		transclude: true
		replace: true
		require: '?^form'

		compile: (element, attrs) ->
			inputEl = findInputEl(element)
			type = inputEl.attr('type')
			element.find('.control-group').addClass(type)

			# link
			return (scope, element, attrs, formController) ->
				inputEl = findInputEl(element)

				scope.input or= {}
				scope.input.id = inputEl.attr('id')
				scope.input.name = inputEl.attr('name')
				scope.input.title = inputEl.attr('title')

				scope.field = formController[scope.input.name]

				buildErrorMsg = ->
					errors = []
					if scope.field.$error.required	then errors.push "Oops, #{scope.input.title} can't be blank"
					if scope.field.$error.email     then errors.push "Please enter a valid email address"
					if scope.field.$error.url       then errors.push "Please enter a valid url, kind of like \"http://example.com\""
					if scope.field.$error.minlength then errors.push "Keep typing, #{scope.input.title} is too short"
					if scope.field.$error.maxlength then errors.push "Whoa, #{scope.input.title} is too long"
					if scope.field.$error.pattern	then errors.push "Whoops, #{scope.input.title} is in the wrong format"
					if scope.field.$error.usernameTaken   then errors.push "Sorry, this #{scope.input.title} is taken"
					scope.field.errorMessage = errors.join('. ')

				if scope.field?
					buildErrorMsg()
					scope.$watch 'field.$error', (() -> buildErrorMsg()), true

				# set 'focused' class on control-group
				scope.hasFocus = false
				inputEl.bind 'focusin', ->
					scope.$apply () ->
						scope.hasFocus = true
				inputEl.bind 'focusout', ->
					scope.$apply () ->
						scope.hasFocus = false

	return directiveDefinitionObject


####################################################
####################################################
# <edit-resource>
psDirectives.directive 'editResource', ->
	directiveDefinitionObject =
		restrict: 'E'
		scope:
			app: '='
			toggle: '='
			resource: '='
		templateUrl: "<%= asset_path('directives/edit_resource.html') %>"

		link: (scope, element, attrs) ->
			scope.resourceCopy = angular.copy scope.resource
			scope.submitForm = ->
				success = (data) ->
					scope.app.flash 'success', 'Bam, saved!'
					scope.resource = angular.copy scope.resourceCopy
				error = (error) ->
					scope.app.flash 'error', error.data.errors
				scope.resourceCopy.save(success, error)


####################################################
# <div centerish>
psDirectives.directive "centerish", ["$timeout", ($timeout) ->
	restrict: "A"
	template: "<div ng-transclude></div>"
	transclude: true

	link: (scope, element, attrs) ->
		center = (animate = false) ->
			height = $(document).height()
			height -= element.height()
			height -= $('#header').height()
			height -= $('#footer').height()
			if height > 0
				if animate
					element.transition { 'margin-top': (height/3) }
				else
					element.css { 'margin-top': (height/3) }

		element.resize ->
			center()

		$(window).resize ->
			center()

		_.each [80, 500, 1000, 2000], (time) ->
			$timeout ->
				center(true)
			, time

]


####################################################
# <ps-a>
psDirectives.directive "psA", [() ->
	restrict: "E"
	template: "<a ng-href='{{href}}'>{{prettyHref}}</a>"
	replace: true
	scope:
		href: '@'
		target: '@'

	link: (scope, element, attrs) ->
		element.find('a').attr 'target', scope.target

		scope.$watch 'href', (href) ->
			if href? and (splitHref = href.split("//")) and splitHref.length > 1
				scope.prettyHref = splitHref[1]
			else
				scope.href = "http://#{scope.href}"

]


####################################################
# <ps-img>
psDirectives.directive "psImg", ["$timeout", ($timeout) ->
	restrict: "E"
	scope:
		src: '@'
		alt: '@'
		imgClass: '@'
		canEdit: '@'
		attachableType: '@'
		attachableId: '@'
		imageType: '@'
		imageUrl: '@'
	templateUrl: "<%= asset_path('directives/ps_img.html') %>"

	link: (scope, element, attrs) ->

		initDropzone = ->
			prompt = "Click to change #{scope.imageType} (or drag one in)"
			tooltip = new Opentip element.find('img'), prompt
			element.find('img').addClass 'ps-img-dropzone'

			imgDropzone = new Dropzone element.find('img', {escapeContent: true}),
				url: '/api/images'
				maxFilesize: 5
				maxThumbnailFilesize: 0.5
				paramName: 'image'
				# previewsContainer: element.find('.dropzone-preview')

			imgDropzone.on "sending", (file, xhr, formData) ->
				tooltip.setContent """
					<div class="progress progress-striped active" style="width:140px;">
						<div class="bar" style="width: 20%;"></div>
					</div>
					"""
				tooltip.show()

				formData.append 'image_type', scope.imageType
				formData.append 'attachable_type', scope.attachableType
				formData.append 'attachable_id', scope.attachableId
				$.rails.CSRFProtection(xhr)

				analytics.track 'image upload sending',
					attachableType: scope.attachableType
					attachableId: scope.attachableId
					imageType: scope.imageType
					imageUrl: scope.imageUrl

			imgDropzone.on "uploadprogress", (file, progress) ->
				tooltip.setContent """
					<div class="progress progress-striped active" style="width:140px;">
						<div class="bar" style="width: #{progress}%;"></div>
					</div>
					"""
				tooltip.show()

			imgDropzone.on "success", (file, data) ->
				$img = element.find('img')
				$img.attr 'src', data.url
				tooltip.setContent("Nice, #{scope.imageType} successfully changed. This is just a preview. Refresh the page in a few seconds to see the final version of your image.")
				$timeout ->
					tooltip.hide()
					tooltip.setContent prompt
				, 20000
				analytics.track 'image upload success',
					attachableType: scope.attachableType
					attachableId: scope.attachableId
					imageType: scope.imageType
					imageUrl: scope.imageUrl

		# TODO: refactor all can methods. Maybe return a models editors in its json.
		scope.$watch 'canEdit', (value) ->
			if value == 'true' then initDropzone()
]


####################################################
####################################################
# <ps-subtle-login>
# TODO: REFACTOR: there is some overlap between this and ps-login directive. see if it can be refactored.
psDirectives.directive 'psSubtleLogin', ["$timeout", "$location", "User", ($timeout, $location, User) ->
	directiveDefinitionObject =
		restrict: 'E'
		scope:
			app: '='
		templateUrl: "<%= asset_path('directives/ps_subtle_login.html') %>"

		link: (scope, element, attrs) ->
			scope.credentials = {loginType: ''}
			scope.usernameTaken = true
			scope.mousedownHappened = false

			$('a').mousedown ->
				scope.mousedownHappened = true
				$timeout () ->
					scope.mousedownHappened = false
				, 2000

			scope.checkLogin = () ->
				login = element.find("#sbtl_lgn_email").val()
				User.query
					login: login
					(data) ->
						if data.length > 0
							scope.credentials.loginType = 'login'
							# scope.app.flash 'info', "Looks like you already have an account. Go ahead and log in."
							$timeout () ->
								element.find('#lgn_password').focus()
							, 100
							analytics.track 'sign up expand',
								type: 'subtle'
								href: window.location.href
						else if data.length == 0
							scope.credentials.loginType = 'register'
							# scope.app.flash 'info', "Looks like you need an account. Go ahead and start one."
							$timeout () ->
								element.find('#reg_password').focus()
							, 100
							analytics.track 'sign in expand',
								type: 'subtle'
								href: window.location.href

			scope.checkUsername = (username = scope.credentials.username) ->
				if scope.credentials.loginType == 'register'
					User.query
						username: username
						(data) ->
							if data.length > 0 and scope.credentials.loginType == 'register'
								scope.usernameTaken = false
							else
								scope.usernameTaken = true
				else
					scope.usernameTaken = true

			scope.login = () ->
				unless scope.app.loggedIn() or scope.mousedownHappened
					if scope.credentials.loginType == 'register'
						scope.app.show.loading = true
						User.register
							user:
								email: element.find("#sbtl_lgn_email").val()
								password: element.find("#reg_password").val()
								username: element.find("#reg_username").val()
							(data) ->
								scope.app.show.loading = false
								scope.app.loadCurrentUser data
								scope.credentials = {loginType: ''}
								# scope.app.flash 'success', "Welcome! Go ahead and start a conversation."
								analytics.track 'sign up success',
									type: 'subtle'
									href: window.location.href
							(error) ->
								scope.app.show.loading = false
								scope.app.flash 'error', error.data.errors
								analytics.track 'sign up error',
									type: 'subtle'
									href: window.location.href
									error: JSON.stringify(error)
					else
						scope.app.show.loading = true
						User.login
							user:
								login: element.find("#sbtl_lgn_email").val()
								password: element.find("#lgn_password").val()
								# remember_me: rememberMe
							(data) ->
								scope.app.show.loading = false
								scope.app.loadCurrentUser data
								scope.credentials = {loginType: ''}
								# scope.app.flash 'success', "Welcome back!"
								analytics.track 'sign in success',
									type: 'subtle'
									href: window.location.href
							(error) ->
								scope.app.show.loading = false
								# TODO: put error on input field
								scope.app.flash 'error', "Oops, that's the wrong password."
								$input = element.find('#lgn_password')
								# $input.focus()
								$input.addClass('animated shake')
								$timeout () ->
								    $input.removeClass('shake')
								,1000
								analytics.track 'sign in error',
									type: 'subtle'
									href: window.location.href
									error: JSON.stringify(error)

			scope.enterLogin = (e) ->
				if e.which == 13
					e.preventDefault()
					scope.login()

			scope.fbLogin = () ->
				scope.app.show.loading = true
				FB.login ((response) ->
					if response.authResponse
						$.get '/users/auth/facebook/callback', { signed_request: response.authResponse.signedRequest }, (data) ->
							scope.app.show.loading = false
							scope.app.loadCurrentUser data
							scope.app.flash 'success', "Welcome!"
							analytics.track 'connect with facebook success',
								type: 'subtle'
								href: window.location.href
					else
						scope.app.show.loading = false
						scope.app.flash 'error', "Sorry, we had trouble contacting facebook. Please try again."
						analytics.track 'connect with facebook error',
							type: 'subtle'
							href: window.location.href
				),
					scope: "email"

			scope.forgot = ->
				scope.app.resetPassword(element.find("#sbtl_lgn_email").val())

]


####################################################
# <ps-login>
psDirectives.directive 'psLogin', ["$timeout", "$routeParams", "$location", "User", ($timeout, $routeParams, $location, User) ->
	directiveDefinitionObject =
		restrict: 'E'
		scope:
			app: '='
		templateUrl: "<%= asset_path('directives/ps_login.html') %>"

		link: (scope, element, attrs) ->
			scope.credentials = {loginType: attrs.loginType}
			scope.usernameTaken = true


			scope.$watch 'credentials.loginType', (value) ->
				el = element.find(".#{value} input")[0]
				if el? then el.focus()

			scope.$watch 'credentials.login', (value) ->
				if value? and value.match(///^[a-zA-Z][a-zA-Z0-9-]*$///)?
					scope.credentials.username = value
					scope.credentials.email = ''
				else
					scope.credentials.email = value
					scope.credentials.username = ''

			scope.checkLogin = () ->
				# TODO: make the loginType change less eratic, maybe don't auto change the form at all. See tumblr
				# TODO: prompt user to input email or username on forgot? failure to find account
				if registering = scope.credentials.loginType == 'register'
					login = scope.credentials.email
				else
					login = scope.credentials.login
				User.query
					login: login
					(data) ->
						if data.length > 0 and registering
							scope.credentials.loginType = 'login'
							scope.credentials.login = login
							scope.app.flash 'info', "Looks like you already have an account. Go ahead and log in."
							$timeout () ->
								if _.isEmpty(scope.credentials.login)
									element.find('#login').focus()
								else
									element.find('#lgn_password').focus()
							, 100
						else if data.length == 0 and !registering
							scope.credentials.loginType = 'register'
							scope.app.flash 'info', "Looks like you need an account. Go ahead and start one."
							$timeout () ->
								if _.isEmpty(scope.credentials.email)
									element.find('#reg_email').focus()
								else
									element.find('#reg_password').focus()
							, 100

			scope.checkUsername = (username = scope.credentials.username) ->
				if scope.credentials.loginType == 'register'
					User.query
						username: username
						(data) ->
							if data.length > 0 and scope.credentials.loginType == 'register'
								scope.usernameTaken = false
							else
								scope.usernameTaken = true
				else
					scope.usernameTaken = true

			scope.login = () ->
				# TODO: why does ngModel only update on the scope when the field is valid?
				if scope.credentials.loginType == 'register'
					scope.app.show.loading = true
					User.register
						user:
							email: element.find("#reg_email").val()
							password: element.find("#reg_password").val()
							username: element.find("#reg_username").val()
						(data) ->
							scope.app.show.loading = false
							scope.app.loadCurrentUser data
							scope.credentials = {loginType: 'login'}
							scope.app.flash 'success', "Welcome. Let's create your Positive Space! What do you want to talk about?"
							if $routeParams.path?
								$location.search(unescape($routeParams.search).replace('?', ''))
								$location.path($routeParams.path)
							else
								$location.path("/#{data.username}")
							analytics.track 'sign up success',
								type: 'form'
								href: window.location.href
						(error) ->
							scope.app.show.loading = false
							scope.app.flash 'error', error.data.errors
							analytics.track 'sign up error',
								type: 'form'
								href: window.location.href
								error: JSON.stringify(error)
				else
					scope.app.show.loading = true
					User.login
						user:
							login: element.find("#login").val()
							password: element.find("#lgn_password").val()
							# remember_me: rememberMe
						(data) ->
							scope.app.show.loading = false
							scope.app.loadCurrentUser data
							scope.credentials = {loginType: 'login'}
							scope.app.flash 'success', "Welcome back!"
							if $routeParams.path?
								$location.search(unescape($routeParams.search).replace('?', ''))
								$location.path($routeParams.path)
							else
								$location.path("/#{data.username}")
							analytics.track 'sign in success',
								type: 'form'
								href: window.location.href
						(error) ->
							scope.app.show.loading = false
							# TODO: put error on input field
							scope.app.flash 'error', "Oops, that's the wrong password."
							$input = element.find('#lgn_password')
							$input.focus()
							$input.addClass('animated shake')
							$timeout () ->
							    $input.removeClass('shake')
							,1000
							analytics.track 'sign in error',
								type: 'form'
								href: window.location.href
								error: JSON.stringify(error)

			scope.fbLogin = () ->
				scope.app.show.loading = true
				FB.login ((response) ->
					if response.authResponse
						$.get '/users/auth/facebook/callback', { signed_request: response.authResponse.signedRequest }, (data) ->
							scope.app.show.loading = false
							scope.app.loadCurrentUser data
							scope.app.flash 'success', "Welcome!"
							if $routeParams.path?
								$location.search(unescape($routeParams.search).replace('?', ''))
								$location.path($routeParams.path)
							else
								$location.path("/#{data.username}")
							analytics.track 'connect with facebook success',
								type: 'form'
								href: window.location.href
					else
						scope.app.show.loading = false
						scope.app.flash 'error', "Sorry, we had trouble contacting facebook. Please try again."
						analytics.track 'connect with facebook error',
							type: 'form'
							href: window.location.href
				),
					scope: "email"

	return directiveDefinitionObject
]


####################################################
####################################################
# Bootstrap Buttons
#
# Stolen from AngularStrap
# http://mgcrea.github.com/angular-strap/#/buttons
# requires bootstrap-button js and jQuery
# TODO: rewrite to remove dependency on bootstrap js and jQuery
#
# Radio Buttons
# <div class="btn-group" ng-model="radioValue" ps-buttons-radio>
#	<button type="button" class="btn" value="left">...</button>
#	<button type="button" class="btn" value="middle">...</button>
#	<button type="button" class="btn" value="right">...</button>
# </div>
# or
# <div class="btn-group" ps-buttons-radio>
#	<button type="button" class="btn" ng-model="radio.left">...</button>
#	<button type="button" class="btn" ng-model="radio.middle">...</button>
#	<button type="button" class="btn" ng-model="radio.right">...</button>
# </div>
psDirectives.directive("psButton", ["$parse", "$timeout", ($parse, $timeout) ->
	"use strict"
	restrict: "A"
	require: "?ngModel"
	link: postLink = (scope, element, attrs, controller) ->
		if controller
			element.attr "data-toggle", "button"  unless element.parent("[data-toggle=\"buttons-checkbox\"], [data-toggle=\"buttons-radio\"]").length
			startValue = !!scope.$eval(attrs.ngModel)
			element.addClass "active"  if startValue
			scope.$watch attrs.ngModel, (newValue, oldValue) ->
				bNew = !!newValue
				bOld = !!oldValue
				if bNew isnt bOld
					$.fn.button.Constructor::toggle.call button
				else element.addClass "active"  if bNew and not startValue

		unless element.hasClass("btn")
			element.on "click.button.data-api", (e) ->
				element.button "toggle"

		element.button()
		button = element.data("button")
		button.toggle = ->
			return $.fn.button.Constructor::toggle.call(this)  unless controller
			$parent = element.parent("[data-toggle=\"buttons-radio\"]")
			if $parent.length
				element.siblings("[ng-model]").each (k, v) ->
					$parse($(v).attr("ng-model")).assign scope, false

				scope.$digest()
				unless controller.$modelValue
					controller.$setViewValue not controller.$modelValue
					scope.$digest()
			else
				scope.$apply ->
					controller.$setViewValue not controller.$modelValue

]).directive("psButtonsCheckbox", ["$parse", ($parse) ->
	"use strict"
	restrict: "A"
	require: "?ngModel"
	compile: compile = (tElement, tAttrs, transclude) ->
		tElement.attr("data-toggle", "buttons-checkbox").find("a, button").each (k, v) ->
			$(v).attr "ps-button", ""

]).directive "psButtonsRadio", ["$parse", ($parse) ->
	"use strict"
	restrict: "A"
	require: "?ngModel"
	compile: compile = (tElement, tAttrs, transclude) ->
		tElement.attr "data-toggle", "buttons-radio"

		# Delegate to children ngModel
		unless tAttrs.ngModel
			tElement.find("a, button").each (k, v) ->
				$(v).attr "ps-button", ""

		postLink = (scope, iElement, iAttrs, controller) ->

			# If we have a controller (i.e. ngModelController) then wire it up
			if controller
				iElement.find("[value]").button().filter("[value=\"" + scope.$eval(iAttrs.ngModel) + "\"]").addClass "active"
				iElement.on "click.button.data-api", (ev) ->
					scope.$apply ->
						controller.$setViewValue $(ev.target).closest("button").attr("value")



				# Watch model for changes
				scope.$watch iAttrs.ngModel, (newValue, oldValue) ->
					if newValue isnt oldValue
						$btn = iElement.find("[value=\"" + scope.$eval(iAttrs.ngModel) + "\"]")
						$.fn.button.Constructor::toggle.call $btn.data("button")  if $btn.length

]

